@inject NavigationManager navigationManager
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensaje

    <EditForm Model="usuario" OnValidSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-field col-4">
            <label>Nombre de usuario:</label>
            <div>
                <InputText Class="form-control" @bind-Value="@usuario.UserName" />
                <ValidationMessage For="@(() => usuario.UserName)" />
            </div>
        </div>
        <div class="form-field col-4">
            <label>Email:</label>
            <div>
                <InputText Class="form-control" @bind-Value="@usuario.Email" />
                <ValidationMessage For="@(() => usuario.Email)" />
            </div>
        </div>
        <div class="form-group col-4">
            <label>Password:</label>
            <div>
                <InputPassword Class="form-control" @bind-Value="@usuario.Password" />
                <ValidationMessage For="@(() => usuario.Password)" />
            </div>
        </div>

        <div class="form-field col-4">
            <label>Nivel de Usuario:</label>
            <div>
                <RadzenDropDown AllowFiltering="false" AllowClear="true" Data="roles"
                                @bind-Value="usuario.rol" TextProperty="Nombre" />
                <ValidationMessage For="@(() => @usuario.rol)" />
            </div>
        </div>


 

        <br />
        <div class="form-field col-4">
            <a class="btn btn-warning" href="javascript:history.go(-1)">Volver</a>
            <button type="submit" class="btn btn-primary">@TextoBoton</button>
        </div>
    </EditForm>

@code { [Parameter] public Usuario usuario { get; set; }
    [Parameter] public String TextoBoton { get; set; } = "Guardar";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private List<Rol> roles;

protected override async Task OnInitializedAsync()
{
    
        var httpResponse = await repositorio.Get<List<Rol>>("api/usuarios/roles");
        if (httpResponse.Error)
        {
            await mostrarMensaje.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            roles = httpResponse.Response;
        }
    }


  
    }
