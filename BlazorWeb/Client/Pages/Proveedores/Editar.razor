@page "/editar-proveedor/{Idproveedor:int}"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensaje
@inject IJSRuntime JS
@inject NavigationManager navigationManager
@attribute [Authorize]

<h3>Editar Proveedor</h3>

@if (proveedor != null)
{
    <FormularioProveedor TextoBoton="Editar Proveedor" OnValidSubmit="@EditarProveedor" proveedor="@proveedor" />

}

@code {
    [Parameter] public int Idproveedor { get; set; }
    Proveedor proveedor;

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<Proveedor>($"api/proveedores/{Idproveedor}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("indice-proveedores");
            }
            else
            {
                await mostrarMensaje.MostrarMensajeError(await httpResponse.GetBody());
            }
        }
        else
        {
            proveedor = httpResponse.Response;
        }
    }

    private async Task EditarProveedor()
    {
        try
        {
            var httpResponse = await repositorio.Put<Proveedor>("api/proveedores", proveedor);

            if (httpResponse.Error)
            {
                await mostrarMensaje.MostrarMensajeError(await httpResponse.GetBody());
            }
            else
            {
                navigationManager.NavigateTo("indice-proveedores");
            }
        }

        catch (Exception ex)
        {
            await mostrarMensaje.MostrarMensajeError(ex.Message);
        }
    } }


